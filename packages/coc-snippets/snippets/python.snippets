snippet for "for value in list:"
for ${1:value} in ${2:list}:
	${3:pass}
endsnippet

snippet lambda "lambda statement_like_argument: statement_to_be_returned"
lambda ${1:statement}: ${2:statement_to_be_returned}
endsnippet

snippet if "if statement:"
if ${1:statement}:
	${2:pass}
endsnippet

snippet elif "elif statement:"
elif ${1}:
	${2:pass}
endsnippet

snippet else "else:"
else:
	${1:pass}
endsnippet

snippet while "while"
while ${1:statement}:
	${2:pass}
endsnippet

snippet from "from import"
from ${1:module_name} import ${2:function}
endsnippet

snippet import "import"
import ${1:module_name}
endsnippet

snippet import_as "import as"
import ${1:module_name} as ${2}
endsnippet

snippet def "def"
def ${1:function_name}(${2}):
	${3:pass}
endsnippet

snippet test "test" 
def test_${1}(${2}):
	${3:pass}
endsnippet

snippet main "def main():"
def main():
	${1:pass}
endsnippet

snippet name "if __name__ == '__main__':"
if __name__ == '__main__':
	${1:pass}
endsnippet

snippet class "class className():"
class ${1:className}${2}:
	${3:pass}
endsnippet

snippet init "__init__()"
def __init__(self,${1}):
	${2:pass}
endsnippet

snippet super "super().__init__()"
super().__init__()
endsnippet

snippet return "return statement"
return ${1:statement}
endsnippet

snippet self "self.member"
self.${1:member} = ${1}
endsnippet

snippet route "route"
@${1:app}.route('/${2}',methods = ['${3:GET}'${4}])
endsnippet
