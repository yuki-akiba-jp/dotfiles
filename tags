!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
List	packages/competitive_programing/pylib/binary_search.py	/^from typing import List, NewType$/;"	i
NewType	packages/competitive_programing/pylib/binary_search.py	/^from typing import List, NewType$/;"	i
IndexNum	packages/competitive_programing/pylib/binary_search.py	/^IndexNum = NewType('IndexNum', int)$/;"	v
linear_search	packages/competitive_programing/pylib/binary_search.py	/^def linear_search(numbers: List[int], value: int) -> IndexNum:$/;"	f
binary_search	packages/competitive_programing/pylib/binary_search.py	/^def binary_search(numbers: List[int], value: int) -> IndexNum:$/;"	f
binary_search	packages/competitive_programing/pylib/binary_search.py	/^def binary_search(numbers: List[int], value: int) -> IndexNum:$/;"	f
_binary_search	packages/competitive_programing/pylib/binary_search.py	/^    def _binary_search(numbers: List[int], value: int,$/;"	f	function:binary_search
integer_to_bit_string	packages/competitive_programing/pylib/integer_to_bit_string.py	/^def integer_to_bit_string(num):$/;"	f
List	packages/competitive_programing/pylib/sort/quick_sort.py	/^from typing import List$/;"	i
partition	packages/competitive_programing/pylib/sort/quick_sort.py	/^def partition(numbers: List[int], low: int, high: int) -> int:$/;"	f
quick_sort	packages/competitive_programing/pylib/sort/quick_sort.py	/^def quick_sort(numbers: List[int]) -> List[int]:$/;"	f
_quick_sort	packages/competitive_programing/pylib/sort/quick_sort.py	/^    def _quick_sort(numbers: List[int], low: int, high: int) -> None:$/;"	f	function:quick_sort
List	packages/competitive_programing/pylib/sort/merge_sort.py	/^from typing import List$/;"	i
merge_sort	packages/competitive_programing/pylib/sort/merge_sort.py	/^def merge_sort(numbers: List[int]) -> List[int]:$/;"	f
nums	packages/competitive_programing/pylib/sort/merge_sort.py	/^    nums = [1,2,4,1,3,2,5,6,7,45,42,1,0]$/;"	v
List	packages/competitive_programing/pylib/sort/insertion_sort.py	/^from typing import List$/;"	i
insertion_sort	packages/competitive_programing/pylib/sort/insertion_sort.py	/^def insertion_sort(numbers: List[int]) -> List[int]:$/;"	f
nums	packages/competitive_programing/pylib/sort/insertion_sort.py	/^    nums = [2, 3, 56, 0, 2, 2, 3, 4, 3, 2, 38, 1]$/;"	v
List	packages/competitive_programing/pylib/sort/bubble_sort.py	/^from typing import List$/;"	i
bubble_sort	packages/competitive_programing/pylib/sort/bubble_sort.py	/^def bubble_sort(numbers: List[int]) -> List[int]:$/;"	f
nums	packages/competitive_programing/pylib/sort/bubble_sort.py	/^    nums = [2,3,56,0,2]$/;"	v
List	packages/competitive_programing/pylib/sort/selection_sort.py	/^from typing import List$/;"	i
selection_sort	packages/competitive_programing/pylib/sort/selection_sort.py	/^def selection_sort(numbers: List[int]) -> List[int]:$/;"	f
nums	packages/competitive_programing/pylib/sort/selection_sort.py	/^    nums = [2, 3, 56, 0, 2,2,3,4,3,2,38,1]$/;"	v
sys	packages/competitive_programing/pylib/sort/heap_sort.py	/^import sys$/;"	i
Optional	packages/competitive_programing/pylib/sort/heap_sort.py	/^from typing import Optional$/;"	i
MiniHeap	packages/competitive_programing/pylib/sort/heap_sort.py	/^class MiniHeap(object):$/;"	c
__init__	packages/competitive_programing/pylib/sort/heap_sort.py	/^    def __init__(self) -> None:$/;"	m	class:MiniHeap
parent_index	packages/competitive_programing/pylib/sort/heap_sort.py	/^    def parent_index(self, index: int) -> int:$/;"	m	class:MiniHeap
left_child_index	packages/competitive_programing/pylib/sort/heap_sort.py	/^    def left_child_index(self, index: int) -> int:$/;"	m	class:MiniHeap
right_child_index	packages/competitive_programing/pylib/sort/heap_sort.py	/^    def right_child_index(self, index: int) -> int:$/;"	m	class:MiniHeap
swap	packages/competitive_programing/pylib/sort/heap_sort.py	/^    def swap(self, index1: int, index2: int) -> None:$/;"	m	class:MiniHeap
heapify_up	packages/competitive_programing/pylib/sort/heap_sort.py	/^    def heapify_up(self, index: int) -> None:$/;"	m	class:MiniHeap
push	packages/competitive_programing/pylib/sort/heap_sort.py	/^    def push(self, value: int) -> None:$/;"	m	class:MiniHeap
min_child_index	packages/competitive_programing/pylib/sort/heap_sort.py	/^    def min_child_index(self, index: int) -> int:$/;"	m	class:MiniHeap
heapify_down	packages/competitive_programing/pylib/sort/heap_sort.py	/^    def heapify_down(self, index: int) -> None:$/;"	m	class:MiniHeap
pop	packages/competitive_programing/pylib/sort/heap_sort.py	/^    def pop(self) -> Optional[int]:$/;"	m	class:MiniHeap
min_heap	packages/competitive_programing/pylib/sort/heap_sort.py	/^    min_heap = MiniHeap()$/;"	v	class:MiniHeap
G	packages/competitive_programing/pylib/graph/friends_friend.py	/^G = [[] for _ in range(N)]$/;"	v
friends	packages/competitive_programing/pylib/graph/friends_friend.py	/^friends = set(G[X])$/;"	v
result	packages/competitive_programing/pylib/graph/friends_friend.py	/^result = set()$/;"	v
heapq	packages/competitive_programing/pylib/graph/dijkstra.py	/^import heapq$/;"	i
edge	packages/competitive_programing/pylib/graph/dijkstra.py	/^class edge:$/;"	c
__init__	packages/competitive_programing/pylib/graph/dijkstra.py	/^    def __init__(self, end, leng):$/;"	m	class:edge
INF	packages/competitive_programing/pylib/graph/dijkstra.py	/^INF = 10**9 # 初期化で使う十分大きな数$/;"	v
G	packages/competitive_programing/pylib/graph/dijkstra.py	/^G = [[] for _ in range(N)]$/;"	v
dist	packages/competitive_programing/pylib/graph/dijkstra.py	/^dist = [INF for _ in range(N)]  # dist[i]：頂点 0 から頂点 i への暫定的な経路長$/;"	v
done	packages/competitive_programing/pylib/graph/dijkstra.py	/^done = [False for _ in range(N)]    # done[i]：頂点 i の最短距離が確定しているか$/;"	v
A	packages/competitive_programing/pylib/graph/follow.py	/^A = []$/;"	v
B	packages/competitive_programing/pylib/graph/follow.py	/^B = []$/;"	v
re	packages/competitive_programing/pylib/graph/follow.py	/^re = [[]*N]$/;"	v
G	packages/competitive_programing/pylib/graph/friend_of_popular.py	/^G = [[] for i in range(N)]$/;"	v
max_index	packages/competitive_programing/pylib/graph/friend_of_popular.py	/^max_index = -1$/;"	v
max_len	packages/competitive_programing/pylib/graph/friend_of_popular.py	/^max_len = -1$/;"	v
max_index	packages/competitive_programing/pylib/graph/friend_of_popular.py	/^        max_index = i$/;"	v
max_len	packages/competitive_programing/pylib/graph/friend_of_popular.py	/^        max_len = len(G[i])$/;"	v
S	packages/competitive_programing/pylib/graph/friend.py	/^S = []$/;"	v
s	packages/competitive_programing/pylib/graph/friend.py	/^    s = input()$/;"	v
A	packages/competitive_programing/pylib/graph/box_in_box.py	/^A = list(map(int, input().split()))$/;"	v
res	packages/competitive_programing/pylib/graph/box_in_box.py	/^res = 0$/;"	v
X	packages/competitive_programing/pylib/graph/box_in_box.py	/^    X = A[X]$/;"	v
edge	packages/competitive_programing/pylib/graph/saisyouzenikigi.py	/^class edge:$/;"	c
__init__	packages/competitive_programing/pylib/graph/saisyouzenikigi.py	/^    def __init__(self, start, end, leng):$/;"	m	class:edge
__lt__	packages/competitive_programing/pylib/graph/saisyouzenikigi.py	/^    def __lt__(self, other):$/;"	m	class:edge	file:
UnionFind	packages/competitive_programing/pylib/graph/saisyouzenikigi.py	/^class UnionFind():$/;"	c
__init__	packages/competitive_programing/pylib/graph/saisyouzenikigi.py	/^    def __init__(self, n):$/;"	m	class:UnionFind
root	packages/competitive_programing/pylib/graph/saisyouzenikigi.py	/^    def root(self, x):$/;"	m	class:UnionFind
issame	packages/competitive_programing/pylib/graph/saisyouzenikigi.py	/^    def issame(self, x, y):$/;"	m	class:UnionFind
unite	packages/competitive_programing/pylib/graph/saisyouzenikigi.py	/^    def unite(self, x, y):$/;"	m	class:UnionFind
size	packages/competitive_programing/pylib/graph/saisyouzenikigi.py	/^    def size(self, x):$/;"	m	class:UnionFind
graph_edges	packages/competitive_programing/pylib/graph/saisyouzenikigi.py	/^graph_edges = [[] for _ in range(M)]    # graph_edges[i]：i 番目の辺情報$/;"	v
uf	packages/competitive_programing/pylib/graph/saisyouzenikigi.py	/^uf = UnionFind(N)$/;"	v
ans	packages/competitive_programing/pylib/graph/saisyouzenikigi.py	/^ans = 0  # 答えとなる変$/;"	v
G	packages/competitive_programing/pylib/graph/bfs.py	/^G = [[] for i in range(N)]$/;"	v
dist	packages/competitive_programing/pylib/graph/bfs.py	/^dist = [-1] * N$/;"	v
nodes	packages/competitive_programing/pylib/graph/bfs.py	/^nodes = [[] for i in range(N)]$/;"	v
edge	packages/competitive_programing/pylib/graph/keirohukugen.py	/^class edge:$/;"	c
__init__	packages/competitive_programing/pylib/graph/keirohukugen.py	/^    def __init__(self, start, end, leng):$/;"	m	class:edge
INF	packages/competitive_programing/pylib/graph/keirohukugen.py	/^INF = 10**9 # 初期化で使う十分大きな数$/;"	v
graph_edges	packages/competitive_programing/pylib/graph/keirohukugen.py	/^graph_edges = [[] for _ in range(M)]    # graph_edges[i]：i 番目の辺情報$/;"	v
dist	packages/competitive_programing/pylib/graph/keirohukugen.py	/^dist = [INF for _ in range(N)]  # dist[i]：現在の d_i の値 (0 以外は 10^9 で初期化する)$/;"	v
prev	packages/competitive_programing/pylib/graph/keirohukugen.py	/^prev = [-1 for _ in range(N)]   # prev[i]：頂点 0 から i への最短経路において、頂点 i の前にどこにいたか$/;"	v
flg	packages/competitive_programing/pylib/graph/keirohukugen.py	/^    flg = False  # k 回目のステップで dist の変更があるかを表すフラグ$/;"	v
order	packages/competitive_programing/pylib/graph/keirohukugen.py	/^order = []  # 頂点 0 から N-1 へ向かう最短経路を保存する配列$/;"	v
now	packages/competitive_programing/pylib/graph/keirohukugen.py	/^now = N-1$/;"	v
now	packages/competitive_programing/pylib/graph/keirohukugen.py	/^    now = prev[now]$/;"	v
sys	packages/competitive_programing/pylib/graph/ikigakejun.py	/^import sys$/;"	i
rec	packages/competitive_programing/pylib/graph/ikigakejun.py	/^def rec(v, chs):$/;"	f
N	packages/competitive_programing/pylib/graph/ikigakejun.py	/^N = int(input())$/;"	v
P	packages/competitive_programing/pylib/graph/ikigakejun.py	/^P = list(map(int, input().split()))$/;"	v
chs	packages/competitive_programing/pylib/graph/ikigakejun.py	/^chs = [[] for v in range(N)]$/;"	v
rec	packages/competitive_programing/pylib/graph/dfs.py	/^def rec(v, G, seen):$/;"	f
G	packages/competitive_programing/pylib/graph/dfs.py	/^G = [[] for _ in range(N)]  # グラフを表現する隣接リスト$/;"	v
seen	packages/competitive_programing/pylib/graph/dfs.py	/^seen = [False for _ in range(N)]$/;"	v
pi	packages/competitive_programing/pylib/syousuutenkirisute.py	/^    pi = 3.141592653589793238$/;"	v
pi	packages/competitive_programing/pylib/syousuutenkirisute.py	/^    pi = 3.141592653589793238$/;"	v
n	packages/competitive_programing/pylib/inputs.py	/^n = int(input())$/;"	v
a	packages/competitive_programing/pylib/inputs.py	/^a = list(map(int, input().split()))$/;"	v
s	packages/competitive_programing/pylib/inputs.py	/^s = str(input())$/;"	v
a	packages/competitive_programing/pylib/inputs.py	/^a = [input() for _ in range(n)]$/;"	v
input_lines	packages/competitive_programing/pylib/inputs.py	/^    input_lines = [line.strip().split(',') for line in f.readlines()]$/;"	v
lines	packages/competitive_programing/pylib/inputs.py	/^    lines = []$/;"	v
S	packages/competitive_programing/pylib/dp/saityoukyoutsuububunnretsu.py	/^S = str(input())$/;"	v
T	packages/competitive_programing/pylib/dp/saityoukyoutsuububunnretsu.py	/^T = str(input())$/;"	v
field_size	packages/competitive_programing/pylib/dp/saityoukyoutsuububunnretsu.py	/^field_size = max(len(S), len(T))+10$/;"	v
dp	packages/competitive_programing/pylib/dp/saityoukyoutsuububunnretsu.py	/^dp = [[0]*field_size for _ in range(field_size)]$/;"	v
A	packages/competitive_programing/pylib/dp/bubunwa.py	/^A = list(map(int, input().split()))$/;"	v
dp	packages/competitive_programing/pylib/dp/bubunwa.py	/^dp = [[False]*(M+1) for _ in range(N+1)]$/;"	v
ans	packages/competitive_programing/pylib/dp/bubunwa.py	/^    ans = 'Yes'$/;"	v
ans	packages/competitive_programing/pylib/dp/bubunwa.py	/^    ans = 'No'$/;"	v
w	packages/competitive_programing/pylib/dp/knapsack.py	/^w = [0]*N$/;"	v
v	packages/competitive_programing/pylib/dp/knapsack.py	/^v = [0]*N$/;"	v
dp	packages/competitive_programing/pylib/dp/knapsack.py	/^dp = [[0]*(W+1) for i in range(N+1)]$/;"	v
INF	packages/competitive_programing/pylib/dp/saisyoukosutodanseimaching.py	/^INF = 1 << 29$/;"	v
C	packages/competitive_programing/pylib/dp/saisyoukosutodanseimaching.py	/^C = []$/;"	v
c	packages/competitive_programing/pylib/dp/saisyoukosutodanseimaching.py	/^    c = list(map(int, input().split()))$/;"	v
field_size	packages/competitive_programing/pylib/dp/saisyoukosutodanseimaching.py	/^field_size = max(N, M)+10$/;"	v
dp	packages/competitive_programing/pylib/dp/saisyoukosutodanseimaching.py	/^dp = [[INF]*field_size for _ in range(field_size)]$/;"	v
A	packages/competitive_programing/pylib/dp/kosuuseigentsukibubunwa.py	/^A = [0]*N$/;"	v
B	packages/competitive_programing/pylib/dp/kosuuseigentsukibubunwa.py	/^B = [0]*N$/;"	v
INF	packages/competitive_programing/pylib/dp/kosuuseigentsukibubunwa.py	/^INF = 1 << 20$/;"	v
dp	packages/competitive_programing/pylib/dp/kosuuseigentsukibubunwa.py	/^dp = [[INF]*(M+1) for _ in range(N+1)]$/;"	v
A	packages/competitive_programing/pylib/dp/k_koinaibubunwa.py	/^A = list(map(int, input().split()))$/;"	v
INF	packages/competitive_programing/pylib/dp/k_koinaibubunwa.py	/^INF = 1 << 20$/;"	v
dp	packages/competitive_programing/pylib/dp/k_koinaibubunwa.py	/^dp = [[INF]*(M+1) for _ in range(N+1)]$/;"	v
S	packages/competitive_programing/pylib/dp/diff_nums.py	/^S = str(input())$/;"	v
T	packages/competitive_programing/pylib/dp/diff_nums.py	/^T = str(input())$/;"	v
INF	packages/competitive_programing/pylib/dp/diff_nums.py	/^INF = 1 << 30$/;"	v
field_len	packages/competitive_programing/pylib/dp/diff_nums.py	/^field_len = max(len(S), len(T))+2$/;"	v
dp	packages/competitive_programing/pylib/dp/diff_nums.py	/^dp = [[INF] * field_len for _ in range(field_len)]$/;"	v
A	packages/competitive_programing/pylib/dp/saisyoukosuububunwa.py	/^A = list(map(int, input().split()))$/;"	v
INF	packages/competitive_programing/pylib/dp/saisyoukosuububunwa.py	/^INF = 1 << 20$/;"	v
dp	packages/competitive_programing/pylib/dp/saisyoukosuububunwa.py	/^dp = [[INF]*(M+1) for _ in range(N+1)]$/;"	v
A	packages/competitive_programing/pylib/dp/bubunwakazoeage.py	/^A = list(map(int, input().split()))$/;"	v
dp	packages/competitive_programing/pylib/dp/bubunwakazoeage.py	/^dp = [[0]*(M+1) for _ in range(N+1)]$/;"	v
n	packages/competitive_programing/pylib/dp/saidaiwa.py	/^n = int(input())$/;"	v
a	packages/competitive_programing/pylib/dp/saidaiwa.py	/^a = list(map(int, input().split()))$/;"	v
re	packages/competitive_programing/pylib/dp/saidaiwa.py	/^re = 0$/;"	v
graph	packages/competitive_programing/pylib/main.py	/^graph = [[] for _ in range(n)]  # グラフを表現する隣接リスト$/;"	v
visited	packages/competitive_programing/pylib/main.py	/^visited = [False for _ in range(n)]$/;"	v
dfs	packages/competitive_programing/pylib/main.py	/^def dfs(currentIndex):$/;"	f
cnt	packages/competitive_programing/pylib/main.py	/^cnt = 0$/;"	v
os	packages/competitive_programing/pylib/make_dirs_and_files.py	/^import os$/;"	i
Path	packages/competitive_programing/pylib/make_dirs_and_files.py	/^from pathlib import Path$/;"	i
dir_name	packages/competitive_programing/pylib/make_dirs_and_files.py	/^    dir_name = f'temp{i}'$/;"	v
sys	packages/competitive_programing/pylib/saiki_jougen.py	/^import sys$/;"	i
bit_string_to_integer	packages/competitive_programing/pylib/bit_string_to_integer.py	/^def bit_string_to_integer(bit_string):$/;"	f
